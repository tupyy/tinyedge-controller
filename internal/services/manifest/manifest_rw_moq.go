// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package manifest

import (
	"context"
	"github.com/tupyy/tinyedge-controller/internal/entity"
	"sync"
)

// Ensure, that ManifestReaderWriterMock does implement ManifestReaderWriter.
// If this is not the case, regenerate this file with moq.
var _ ManifestReaderWriter = &ManifestReaderWriterMock{}

// ManifestReaderWriterMock is a mock implementation of ManifestReaderWriter.
//
// 	func TestSomethingThatUsesManifestReaderWriter(t *testing.T) {
//
// 		// make and configure a mocked ManifestReaderWriter
// 		mockedManifestReaderWriter := &ManifestReaderWriterMock{
// 			CreateRelationFunc: func(ctx context.Context, relation entity.Relation) error {
// 				panic("mock out the CreateRelation method")
// 			},
// 			DeleteManifestFunc: func(ctx context.Context, id string) error {
// 				panic("mock out the DeleteManifest method")
// 			},
// 			DeleteRelationFunc: func(ctx context.Context, relation entity.Relation) error {
// 				panic("mock out the DeleteRelation method")
// 			},
// 			GetManifestFunc: func(ctx context.Context, id string) (entity.Manifest, error) {
// 				panic("mock out the GetManifest method")
// 			},
// 			GetManifestsFunc: func(ctx context.Context, repo entity.Repository) ([]entity.Manifest, error) {
// 				panic("mock out the GetManifests method")
// 			},
// 			InsertManifestFunc: func(ctx context.Context, manifest entity.Manifest) error {
// 				panic("mock out the InsertManifest method")
// 			},
// 			UpdateManifestFunc: func(ctx context.Context, manifest entity.Manifest) error {
// 				panic("mock out the UpdateManifest method")
// 			},
// 		}
//
// 		// use mockedManifestReaderWriter in code that requires ManifestReaderWriter
// 		// and then make assertions.
//
// 	}
type ManifestReaderWriterMock struct {
	// CreateRelationFunc mocks the CreateRelation method.
	CreateRelationFunc func(ctx context.Context, relation entity.Relation) error

	// DeleteManifestFunc mocks the DeleteManifest method.
	DeleteManifestFunc func(ctx context.Context, id string) error

	// DeleteRelationFunc mocks the DeleteRelation method.
	DeleteRelationFunc func(ctx context.Context, relation entity.Relation) error

	// GetManifestFunc mocks the GetManifest method.
	GetManifestFunc func(ctx context.Context, id string) (entity.Manifest, error)

	// GetManifestsFunc mocks the GetManifests method.
	GetManifestsFunc func(ctx context.Context, repo entity.Repository) ([]entity.Manifest, error)

	// InsertManifestFunc mocks the InsertManifest method.
	InsertManifestFunc func(ctx context.Context, manifest entity.Manifest) error

	// UpdateManifestFunc mocks the UpdateManifest method.
	UpdateManifestFunc func(ctx context.Context, manifest entity.Manifest) error

	// calls tracks calls to the methods.
	calls struct {
		// CreateRelation holds details about calls to the CreateRelation method.
		CreateRelation []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Relation is the relation argument value.
			Relation entity.Relation
		}
		// DeleteManifest holds details about calls to the DeleteManifest method.
		DeleteManifest []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// DeleteRelation holds details about calls to the DeleteRelation method.
		DeleteRelation []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Relation is the relation argument value.
			Relation entity.Relation
		}
		// GetManifest holds details about calls to the GetManifest method.
		GetManifest []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// GetManifests holds details about calls to the GetManifests method.
		GetManifests []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Repo is the repo argument value.
			Repo entity.Repository
		}
		// InsertManifest holds details about calls to the InsertManifest method.
		InsertManifest []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Manifest is the manifest argument value.
			Manifest entity.Manifest
		}
		// UpdateManifest holds details about calls to the UpdateManifest method.
		UpdateManifest []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Manifest is the manifest argument value.
			Manifest entity.Manifest
		}
	}
	lockCreateRelation sync.RWMutex
	lockDeleteManifest sync.RWMutex
	lockDeleteRelation sync.RWMutex
	lockGetManifest    sync.RWMutex
	lockGetManifests   sync.RWMutex
	lockInsertManifest sync.RWMutex
	lockUpdateManifest sync.RWMutex
}

// CreateRelation calls CreateRelationFunc.
func (mock *ManifestReaderWriterMock) CreateRelation(ctx context.Context, relation entity.Relation) error {
	if mock.CreateRelationFunc == nil {
		panic("ManifestReaderWriterMock.CreateRelationFunc: method is nil but ManifestReaderWriter.CreateRelation was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Relation entity.Relation
	}{
		Ctx:      ctx,
		Relation: relation,
	}
	mock.lockCreateRelation.Lock()
	mock.calls.CreateRelation = append(mock.calls.CreateRelation, callInfo)
	mock.lockCreateRelation.Unlock()
	return mock.CreateRelationFunc(ctx, relation)
}

// CreateRelationCalls gets all the calls that were made to CreateRelation.
// Check the length with:
//     len(mockedManifestReaderWriter.CreateRelationCalls())
func (mock *ManifestReaderWriterMock) CreateRelationCalls() []struct {
	Ctx      context.Context
	Relation entity.Relation
} {
	var calls []struct {
		Ctx      context.Context
		Relation entity.Relation
	}
	mock.lockCreateRelation.RLock()
	calls = mock.calls.CreateRelation
	mock.lockCreateRelation.RUnlock()
	return calls
}

// DeleteManifest calls DeleteManifestFunc.
func (mock *ManifestReaderWriterMock) DeleteManifest(ctx context.Context, id string) error {
	if mock.DeleteManifestFunc == nil {
		panic("ManifestReaderWriterMock.DeleteManifestFunc: method is nil but ManifestReaderWriter.DeleteManifest was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockDeleteManifest.Lock()
	mock.calls.DeleteManifest = append(mock.calls.DeleteManifest, callInfo)
	mock.lockDeleteManifest.Unlock()
	return mock.DeleteManifestFunc(ctx, id)
}

// DeleteManifestCalls gets all the calls that were made to DeleteManifest.
// Check the length with:
//     len(mockedManifestReaderWriter.DeleteManifestCalls())
func (mock *ManifestReaderWriterMock) DeleteManifestCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockDeleteManifest.RLock()
	calls = mock.calls.DeleteManifest
	mock.lockDeleteManifest.RUnlock()
	return calls
}

// DeleteRelation calls DeleteRelationFunc.
func (mock *ManifestReaderWriterMock) DeleteRelation(ctx context.Context, relation entity.Relation) error {
	if mock.DeleteRelationFunc == nil {
		panic("ManifestReaderWriterMock.DeleteRelationFunc: method is nil but ManifestReaderWriter.DeleteRelation was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Relation entity.Relation
	}{
		Ctx:      ctx,
		Relation: relation,
	}
	mock.lockDeleteRelation.Lock()
	mock.calls.DeleteRelation = append(mock.calls.DeleteRelation, callInfo)
	mock.lockDeleteRelation.Unlock()
	return mock.DeleteRelationFunc(ctx, relation)
}

// DeleteRelationCalls gets all the calls that were made to DeleteRelation.
// Check the length with:
//     len(mockedManifestReaderWriter.DeleteRelationCalls())
func (mock *ManifestReaderWriterMock) DeleteRelationCalls() []struct {
	Ctx      context.Context
	Relation entity.Relation
} {
	var calls []struct {
		Ctx      context.Context
		Relation entity.Relation
	}
	mock.lockDeleteRelation.RLock()
	calls = mock.calls.DeleteRelation
	mock.lockDeleteRelation.RUnlock()
	return calls
}

// GetManifest calls GetManifestFunc.
func (mock *ManifestReaderWriterMock) GetManifest(ctx context.Context, id string) (entity.Manifest, error) {
	if mock.GetManifestFunc == nil {
		panic("ManifestReaderWriterMock.GetManifestFunc: method is nil but ManifestReaderWriter.GetManifest was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetManifest.Lock()
	mock.calls.GetManifest = append(mock.calls.GetManifest, callInfo)
	mock.lockGetManifest.Unlock()
	return mock.GetManifestFunc(ctx, id)
}

// GetManifestCalls gets all the calls that were made to GetManifest.
// Check the length with:
//     len(mockedManifestReaderWriter.GetManifestCalls())
func (mock *ManifestReaderWriterMock) GetManifestCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockGetManifest.RLock()
	calls = mock.calls.GetManifest
	mock.lockGetManifest.RUnlock()
	return calls
}

// GetManifests calls GetManifestsFunc.
func (mock *ManifestReaderWriterMock) GetManifests(ctx context.Context, repo entity.Repository) ([]entity.Manifest, error) {
	if mock.GetManifestsFunc == nil {
		panic("ManifestReaderWriterMock.GetManifestsFunc: method is nil but ManifestReaderWriter.GetManifests was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Repo entity.Repository
	}{
		Ctx:  ctx,
		Repo: repo,
	}
	mock.lockGetManifests.Lock()
	mock.calls.GetManifests = append(mock.calls.GetManifests, callInfo)
	mock.lockGetManifests.Unlock()
	return mock.GetManifestsFunc(ctx, repo)
}

// GetManifestsCalls gets all the calls that were made to GetManifests.
// Check the length with:
//     len(mockedManifestReaderWriter.GetManifestsCalls())
func (mock *ManifestReaderWriterMock) GetManifestsCalls() []struct {
	Ctx  context.Context
	Repo entity.Repository
} {
	var calls []struct {
		Ctx  context.Context
		Repo entity.Repository
	}
	mock.lockGetManifests.RLock()
	calls = mock.calls.GetManifests
	mock.lockGetManifests.RUnlock()
	return calls
}

// InsertManifest calls InsertManifestFunc.
func (mock *ManifestReaderWriterMock) InsertManifest(ctx context.Context, manifest entity.Manifest) error {
	if mock.InsertManifestFunc == nil {
		panic("ManifestReaderWriterMock.InsertManifestFunc: method is nil but ManifestReaderWriter.InsertManifest was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Manifest entity.Manifest
	}{
		Ctx:      ctx,
		Manifest: manifest,
	}
	mock.lockInsertManifest.Lock()
	mock.calls.InsertManifest = append(mock.calls.InsertManifest, callInfo)
	mock.lockInsertManifest.Unlock()
	return mock.InsertManifestFunc(ctx, manifest)
}

// InsertManifestCalls gets all the calls that were made to InsertManifest.
// Check the length with:
//     len(mockedManifestReaderWriter.InsertManifestCalls())
func (mock *ManifestReaderWriterMock) InsertManifestCalls() []struct {
	Ctx      context.Context
	Manifest entity.Manifest
} {
	var calls []struct {
		Ctx      context.Context
		Manifest entity.Manifest
	}
	mock.lockInsertManifest.RLock()
	calls = mock.calls.InsertManifest
	mock.lockInsertManifest.RUnlock()
	return calls
}

// UpdateManifest calls UpdateManifestFunc.
func (mock *ManifestReaderWriterMock) UpdateManifest(ctx context.Context, manifest entity.Manifest) error {
	if mock.UpdateManifestFunc == nil {
		panic("ManifestReaderWriterMock.UpdateManifestFunc: method is nil but ManifestReaderWriter.UpdateManifest was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Manifest entity.Manifest
	}{
		Ctx:      ctx,
		Manifest: manifest,
	}
	mock.lockUpdateManifest.Lock()
	mock.calls.UpdateManifest = append(mock.calls.UpdateManifest, callInfo)
	mock.lockUpdateManifest.Unlock()
	return mock.UpdateManifestFunc(ctx, manifest)
}

// UpdateManifestCalls gets all the calls that were made to UpdateManifest.
// Check the length with:
//     len(mockedManifestReaderWriter.UpdateManifestCalls())
func (mock *ManifestReaderWriterMock) UpdateManifestCalls() []struct {
	Ctx      context.Context
	Manifest entity.Manifest
} {
	var calls []struct {
		Ctx      context.Context
		Manifest entity.Manifest
	}
	mock.lockUpdateManifest.RLock()
	calls = mock.calls.UpdateManifest
	mock.lockUpdateManifest.RUnlock()
	return calls
}
