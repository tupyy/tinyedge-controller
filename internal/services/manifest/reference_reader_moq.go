// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package manifest

import (
	"context"
	"github.com/tupyy/tinyedge-controller/internal/entity"
	"sync"
)

// Ensure, that ReferenceReaderMock does implement ReferenceReader.
// If this is not the case, regenerate this file with moq.
var _ ReferenceReader = &ReferenceReaderMock{}

// ReferenceReaderMock is a mock implementation of ReferenceReader.
//
//	func TestSomethingThatUsesReferenceReader(t *testing.T) {
//
//		// make and configure a mocked ReferenceReader
//		mockedReferenceReader := &ReferenceReaderMock{
//			GetReferencesFunc: func(ctx context.Context, repo entity.Repository) ([]entity.ManifestReference, error) {
//				panic("mock out the GetReferences method")
//			},
//		}
//
//		// use mockedReferenceReader in code that requires ReferenceReader
//		// and then make assertions.
//
//	}
type ReferenceReaderMock struct {
	// GetReferencesFunc mocks the GetReferences method.
	GetReferencesFunc func(ctx context.Context, repo entity.Repository) ([]entity.Reference, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetReferences holds details about calls to the GetReferences method.
		GetReferences []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Repo is the repo argument value.
			Repo entity.Repository
		}
	}
	lockGetReferences sync.RWMutex
}

// GetReferences calls GetReferencesFunc.
func (mock *ReferenceReaderMock) GetReferences(ctx context.Context, repo entity.Repository) ([]entity.Reference, error) {
	if mock.GetReferencesFunc == nil {
		panic("ReferenceReaderMock.GetReferencesFunc: method is nil but ReferenceReader.GetReferences was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Repo entity.Repository
	}{
		Ctx:  ctx,
		Repo: repo,
	}
	mock.lockGetReferences.Lock()
	mock.calls.GetReferences = append(mock.calls.GetReferences, callInfo)
	mock.lockGetReferences.Unlock()
	return mock.GetReferencesFunc(ctx, repo)
}

// GetReferencesCalls gets all the calls that were made to GetReferences.
// Check the length with:
//
//	len(mockedReferenceReader.GetReferencesCalls())
func (mock *ReferenceReaderMock) GetReferencesCalls() []struct {
	Ctx  context.Context
	Repo entity.Repository
} {
	var calls []struct {
		Ctx  context.Context
		Repo entity.Repository
	}
	mock.lockGetReferences.RLock()
	calls = mock.calls.GetReferences
	mock.lockGetReferences.RUnlock()
	return calls
}
