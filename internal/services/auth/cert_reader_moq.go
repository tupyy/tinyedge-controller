// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package auth

import (
	"context"
	"github.com/tupyy/tinyedge-controller/internal/entity"
	"sync"
)

// Ensure, that CertificateReaderMock does implement CertificateReader.
// If this is not the case, regenerate this file with moq.
var _ CertificateReader = &CertificateReaderMock{}

// CertificateReaderMock is a mock implementation of CertificateReader.
//
//	func TestSomethingThatUsesCertificateReader(t *testing.T) {
//
//		// make and configure a mocked CertificateReader
//		mockedCertificateReader := &CertificateReaderMock{
//			GetCertificateFunc: func(ctx context.Context, sn string) (entity.CertificateGroup, error) {
//				panic("mock out the GetCertificate method")
//			},
//		}
//
//		// use mockedCertificateReader in code that requires CertificateReader
//		// and then make assertions.
//
//	}
type CertificateReaderMock struct {
	// GetCertificateFunc mocks the GetCertificate method.
	GetCertificateFunc func(ctx context.Context, sn string) (entity.CertificateGroup, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetCertificate holds details about calls to the GetCertificate method.
		GetCertificate []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sn is the sn argument value.
			Sn string
		}
	}
	lockGetCertificate sync.RWMutex
}

// GetCertificate calls GetCertificateFunc.
func (mock *CertificateReaderMock) GetCertificate(ctx context.Context, sn string) (entity.CertificateGroup, error) {
	if mock.GetCertificateFunc == nil {
		panic("CertificateReaderMock.GetCertificateFunc: method is nil but CertificateReader.GetCertificate was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Sn  string
	}{
		Ctx: ctx,
		Sn:  sn,
	}
	mock.lockGetCertificate.Lock()
	mock.calls.GetCertificate = append(mock.calls.GetCertificate, callInfo)
	mock.lockGetCertificate.Unlock()
	return mock.GetCertificateFunc(ctx, sn)
}

// GetCertificateCalls gets all the calls that were made to GetCertificate.
// Check the length with:
//
//	len(mockedCertificateReader.GetCertificateCalls())
func (mock *CertificateReaderMock) GetCertificateCalls() []struct {
	Ctx context.Context
	Sn  string
} {
	var calls []struct {
		Ctx context.Context
		Sn  string
	}
	mock.lockGetCertificate.RLock()
	calls = mock.calls.GetCertificate
	mock.lockGetCertificate.RUnlock()
	return calls
}
