// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package configuration

import (
	"context"
	"github.com/tupyy/tinyedge-controller/internal/entity"
	"sync"
)

// Ensure, that ConfigurationReaderMock does implement ConfigurationReader.
// If this is not the case, regenerate this file with moq.
var _ ConfigurationReader = &ConfigurationReaderMock{}

// ConfigurationReaderMock is a mock implementation of ConfigurationReader.
//
//	func TestSomethingThatUsesConfigurationReader(t *testing.T) {
//
//		// make and configure a mocked ConfigurationReader
//		mockedConfigurationReader := &ConfigurationReaderMock{
//			GetConfigurationFunc: func(ctx context.Context, id string) (entity.Configuration, error) {
//				panic("mock out the GetConfiguration method")
//			},
//		}
//
//		// use mockedConfigurationReader in code that requires ConfigurationReader
//		// and then make assertions.
//
//	}
type ConfigurationReaderMock struct {
	// GetConfigurationFunc mocks the GetConfiguration method.
	GetConfigurationFunc func(ctx context.Context, id string) (entity.Configuration, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetConfiguration holds details about calls to the GetConfiguration method.
		GetConfiguration []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
	}
	lockGetConfiguration sync.RWMutex
}

// GetConfiguration calls GetConfigurationFunc.
func (mock *ConfigurationReaderMock) GetConfiguration(ctx context.Context, id string) (entity.Configuration, error) {
	if mock.GetConfigurationFunc == nil {
		panic("ConfigurationReaderMock.GetConfigurationFunc: method is nil but ConfigurationReader.GetConfiguration was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetConfiguration.Lock()
	mock.calls.GetConfiguration = append(mock.calls.GetConfiguration, callInfo)
	mock.lockGetConfiguration.Unlock()
	return mock.GetConfigurationFunc(ctx, id)
}

// GetConfigurationCalls gets all the calls that were made to GetConfiguration.
// Check the length with:
//
//	len(mockedConfigurationReader.GetConfigurationCalls())
func (mock *ConfigurationReaderMock) GetConfigurationCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockGetConfiguration.RLock()
	calls = mock.calls.GetConfiguration
	mock.lockGetConfiguration.RUnlock()
	return calls
}
