// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package configuration

import (
	"context"
	"github.com/tupyy/tinyedge-controller/internal/entity"
	"sync"
)

// Ensure, that ReferenceReaderMock does implement ReferenceReader.
// If this is not the case, regenerate this file with moq.
var _ ReferenceReader = &ReferenceReaderMock{}

// ReferenceReaderMock is a mock implementation of ReferenceReader.
//
//	func TestSomethingThatUsesReferenceReader(t *testing.T) {
//
//		// make and configure a mocked ReferenceReader
//		mockedReferenceReader := &ReferenceReaderMock{
//			GetReferenceFunc: func(ctx context.Context, id string) (entity.ManifestReference, error) {
//				panic("mock out the GetReference method")
//			},
//		}
//
//		// use mockedReferenceReader in code that requires ReferenceReader
//		// and then make assertions.
//
//	}
type ReferenceReaderMock struct {
	// GetReferenceFunc mocks the GetReference method.
	GetReferenceFunc func(ctx context.Context, id string) (entity.Reference, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetReference holds details about calls to the GetReference method.
		GetReference []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
	}
	lockGetReference sync.RWMutex
}

// GetReference calls GetReferenceFunc.
func (mock *ReferenceReaderMock) GetReference(ctx context.Context, id string) (entity.Reference, error) {
	if mock.GetReferenceFunc == nil {
		panic("ReferenceReaderMock.GetReferenceFunc: method is nil but ReferenceReader.GetReference was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetReference.Lock()
	mock.calls.GetReference = append(mock.calls.GetReference, callInfo)
	mock.lockGetReference.Unlock()
	return mock.GetReferenceFunc(ctx, id)
}

// GetReferenceCalls gets all the calls that were made to GetReference.
// Check the length with:
//
//	len(mockedReferenceReader.GetReferenceCalls())
func (mock *ReferenceReaderMock) GetReferenceCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockGetReference.RLock()
	calls = mock.calls.GetReference
	mock.lockGetReference.RUnlock()
	return calls
}
