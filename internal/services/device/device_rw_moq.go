// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package device

import (
	"context"
	"github.com/tupyy/tinyedge-controller/internal/entity"
	"sync"
)

// Ensure, that DeviceReaderWriterMock does implement DeviceReaderWriter.
// If this is not the case, regenerate this file with moq.
var _ DeviceReaderWriter = &DeviceReaderWriterMock{}

// DeviceReaderWriterMock is a mock implementation of DeviceReaderWriter.
//
// 	func TestSomethingThatUsesDeviceReaderWriter(t *testing.T) {
//
// 		// make and configure a mocked DeviceReaderWriter
// 		mockedDeviceReaderWriter := &DeviceReaderWriterMock{
// 			CreateDeviceFunc: func(ctx context.Context, device entity.Device) error {
// 				panic("mock out the CreateDevice method")
// 			},
// 			CreateNamespaceFunc: func(ctx context.Context, namespace entity.Namespace) error {
// 				panic("mock out the CreateNamespace method")
// 			},
// 			CreateSetFunc: func(ctx context.Context, set entity.Set) error {
// 				panic("mock out the CreateSet method")
// 			},
// 			DeleteNamespaceFunc: func(ctx context.Context, id string) error {
// 				panic("mock out the DeleteNamespace method")
// 			},
// 			DeleteSetFunc: func(ctx context.Context, id string) error {
// 				panic("mock out the DeleteSet method")
// 			},
// 			GetDefaultNamespaceFunc: func(ctx context.Context) (entity.Namespace, error) {
// 				panic("mock out the GetDefaultNamespace method")
// 			},
// 			GetDeviceFunc: func(ctx context.Context, id string) (entity.Device, error) {
// 				panic("mock out the GetDevice method")
// 			},
// 			GetDevicesFunc: func(ctx context.Context) ([]entity.Device, error) {
// 				panic("mock out the GetDevices method")
// 			},
// 			GetNamespaceFunc: func(ctx context.Context, id string) (entity.Namespace, error) {
// 				panic("mock out the GetNamespace method")
// 			},
// 			GetNamespacesFunc: func(ctx context.Context) ([]entity.Namespace, error) {
// 				panic("mock out the GetNamespaces method")
// 			},
// 			GetSetFunc: func(ctx context.Context, id string) (entity.Set, error) {
// 				panic("mock out the GetSet method")
// 			},
// 			GetSetsFunc: func(ctx context.Context) ([]entity.Set, error) {
// 				panic("mock out the GetSets method")
// 			},
// 			UpdateDeviceFunc: func(ctx context.Context, device entity.Device) error {
// 				panic("mock out the UpdateDevice method")
// 			},
// 			UpdateNamespaceFunc: func(ctx context.Context, namespace entity.Namespace) error {
// 				panic("mock out the UpdateNamespace method")
// 			},
// 		}
//
// 		// use mockedDeviceReaderWriter in code that requires DeviceReaderWriter
// 		// and then make assertions.
//
// 	}
type DeviceReaderWriterMock struct {
	// CreateDeviceFunc mocks the CreateDevice method.
	CreateDeviceFunc func(ctx context.Context, device entity.Device) error

	// CreateNamespaceFunc mocks the CreateNamespace method.
	CreateNamespaceFunc func(ctx context.Context, namespace entity.Namespace) error

	// CreateSetFunc mocks the CreateSet method.
	CreateSetFunc func(ctx context.Context, set entity.Set) error

	// DeleteNamespaceFunc mocks the DeleteNamespace method.
	DeleteNamespaceFunc func(ctx context.Context, id string) error

	// DeleteSetFunc mocks the DeleteSet method.
	DeleteSetFunc func(ctx context.Context, id string) error

	// GetDefaultNamespaceFunc mocks the GetDefaultNamespace method.
	GetDefaultNamespaceFunc func(ctx context.Context) (entity.Namespace, error)

	// GetDeviceFunc mocks the GetDevice method.
	GetDeviceFunc func(ctx context.Context, id string) (entity.Device, error)

	// GetDevicesFunc mocks the GetDevices method.
	GetDevicesFunc func(ctx context.Context) ([]entity.Device, error)

	// GetNamespaceFunc mocks the GetNamespace method.
	GetNamespaceFunc func(ctx context.Context, id string) (entity.Namespace, error)

	// GetNamespacesFunc mocks the GetNamespaces method.
	GetNamespacesFunc func(ctx context.Context) ([]entity.Namespace, error)

	// GetSetFunc mocks the GetSet method.
	GetSetFunc func(ctx context.Context, id string) (entity.Set, error)

	// GetSetsFunc mocks the GetSets method.
	GetSetsFunc func(ctx context.Context) ([]entity.Set, error)

	// UpdateDeviceFunc mocks the UpdateDevice method.
	UpdateDeviceFunc func(ctx context.Context, device entity.Device) error

	// UpdateNamespaceFunc mocks the UpdateNamespace method.
	UpdateNamespaceFunc func(ctx context.Context, namespace entity.Namespace) error

	// calls tracks calls to the methods.
	calls struct {
		// CreateDevice holds details about calls to the CreateDevice method.
		CreateDevice []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Device is the device argument value.
			Device entity.Device
		}
		// CreateNamespace holds details about calls to the CreateNamespace method.
		CreateNamespace []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Namespace is the namespace argument value.
			Namespace entity.Namespace
		}
		// CreateSet holds details about calls to the CreateSet method.
		CreateSet []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Set is the set argument value.
			Set entity.Set
		}
		// DeleteNamespace holds details about calls to the DeleteNamespace method.
		DeleteNamespace []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// DeleteSet holds details about calls to the DeleteSet method.
		DeleteSet []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// GetDefaultNamespace holds details about calls to the GetDefaultNamespace method.
		GetDefaultNamespace []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// GetDevice holds details about calls to the GetDevice method.
		GetDevice []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// GetDevices holds details about calls to the GetDevices method.
		GetDevices []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// GetNamespace holds details about calls to the GetNamespace method.
		GetNamespace []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// GetNamespaces holds details about calls to the GetNamespaces method.
		GetNamespaces []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// GetSet holds details about calls to the GetSet method.
		GetSet []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// GetSets holds details about calls to the GetSets method.
		GetSets []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// UpdateDevice holds details about calls to the UpdateDevice method.
		UpdateDevice []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Device is the device argument value.
			Device entity.Device
		}
		// UpdateNamespace holds details about calls to the UpdateNamespace method.
		UpdateNamespace []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Namespace is the namespace argument value.
			Namespace entity.Namespace
		}
	}
	lockCreateDevice        sync.RWMutex
	lockCreateNamespace     sync.RWMutex
	lockCreateSet           sync.RWMutex
	lockDeleteNamespace     sync.RWMutex
	lockDeleteSet           sync.RWMutex
	lockGetDefaultNamespace sync.RWMutex
	lockGetDevice           sync.RWMutex
	lockGetDevices          sync.RWMutex
	lockGetNamespace        sync.RWMutex
	lockGetNamespaces       sync.RWMutex
	lockGetSet              sync.RWMutex
	lockGetSets             sync.RWMutex
	lockUpdateDevice        sync.RWMutex
	lockUpdateNamespace     sync.RWMutex
}

// CreateDevice calls CreateDeviceFunc.
func (mock *DeviceReaderWriterMock) CreateDevice(ctx context.Context, device entity.Device) error {
	if mock.CreateDeviceFunc == nil {
		panic("DeviceReaderWriterMock.CreateDeviceFunc: method is nil but DeviceReaderWriter.CreateDevice was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Device entity.Device
	}{
		Ctx:    ctx,
		Device: device,
	}
	mock.lockCreateDevice.Lock()
	mock.calls.CreateDevice = append(mock.calls.CreateDevice, callInfo)
	mock.lockCreateDevice.Unlock()
	return mock.CreateDeviceFunc(ctx, device)
}

// CreateDeviceCalls gets all the calls that were made to CreateDevice.
// Check the length with:
//     len(mockedDeviceReaderWriter.CreateDeviceCalls())
func (mock *DeviceReaderWriterMock) CreateDeviceCalls() []struct {
	Ctx    context.Context
	Device entity.Device
} {
	var calls []struct {
		Ctx    context.Context
		Device entity.Device
	}
	mock.lockCreateDevice.RLock()
	calls = mock.calls.CreateDevice
	mock.lockCreateDevice.RUnlock()
	return calls
}

// CreateNamespace calls CreateNamespaceFunc.
func (mock *DeviceReaderWriterMock) CreateNamespace(ctx context.Context, namespace entity.Namespace) error {
	if mock.CreateNamespaceFunc == nil {
		panic("DeviceReaderWriterMock.CreateNamespaceFunc: method is nil but DeviceReaderWriter.CreateNamespace was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Namespace entity.Namespace
	}{
		Ctx:       ctx,
		Namespace: namespace,
	}
	mock.lockCreateNamespace.Lock()
	mock.calls.CreateNamespace = append(mock.calls.CreateNamespace, callInfo)
	mock.lockCreateNamespace.Unlock()
	return mock.CreateNamespaceFunc(ctx, namespace)
}

// CreateNamespaceCalls gets all the calls that were made to CreateNamespace.
// Check the length with:
//     len(mockedDeviceReaderWriter.CreateNamespaceCalls())
func (mock *DeviceReaderWriterMock) CreateNamespaceCalls() []struct {
	Ctx       context.Context
	Namespace entity.Namespace
} {
	var calls []struct {
		Ctx       context.Context
		Namespace entity.Namespace
	}
	mock.lockCreateNamespace.RLock()
	calls = mock.calls.CreateNamespace
	mock.lockCreateNamespace.RUnlock()
	return calls
}

// CreateSet calls CreateSetFunc.
func (mock *DeviceReaderWriterMock) CreateSet(ctx context.Context, set entity.Set) error {
	if mock.CreateSetFunc == nil {
		panic("DeviceReaderWriterMock.CreateSetFunc: method is nil but DeviceReaderWriter.CreateSet was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Set entity.Set
	}{
		Ctx: ctx,
		Set: set,
	}
	mock.lockCreateSet.Lock()
	mock.calls.CreateSet = append(mock.calls.CreateSet, callInfo)
	mock.lockCreateSet.Unlock()
	return mock.CreateSetFunc(ctx, set)
}

// CreateSetCalls gets all the calls that were made to CreateSet.
// Check the length with:
//     len(mockedDeviceReaderWriter.CreateSetCalls())
func (mock *DeviceReaderWriterMock) CreateSetCalls() []struct {
	Ctx context.Context
	Set entity.Set
} {
	var calls []struct {
		Ctx context.Context
		Set entity.Set
	}
	mock.lockCreateSet.RLock()
	calls = mock.calls.CreateSet
	mock.lockCreateSet.RUnlock()
	return calls
}

// DeleteNamespace calls DeleteNamespaceFunc.
func (mock *DeviceReaderWriterMock) DeleteNamespace(ctx context.Context, id string) error {
	if mock.DeleteNamespaceFunc == nil {
		panic("DeviceReaderWriterMock.DeleteNamespaceFunc: method is nil but DeviceReaderWriter.DeleteNamespace was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockDeleteNamespace.Lock()
	mock.calls.DeleteNamespace = append(mock.calls.DeleteNamespace, callInfo)
	mock.lockDeleteNamespace.Unlock()
	return mock.DeleteNamespaceFunc(ctx, id)
}

// DeleteNamespaceCalls gets all the calls that were made to DeleteNamespace.
// Check the length with:
//     len(mockedDeviceReaderWriter.DeleteNamespaceCalls())
func (mock *DeviceReaderWriterMock) DeleteNamespaceCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockDeleteNamespace.RLock()
	calls = mock.calls.DeleteNamespace
	mock.lockDeleteNamespace.RUnlock()
	return calls
}

// DeleteSet calls DeleteSetFunc.
func (mock *DeviceReaderWriterMock) DeleteSet(ctx context.Context, id string) error {
	if mock.DeleteSetFunc == nil {
		panic("DeviceReaderWriterMock.DeleteSetFunc: method is nil but DeviceReaderWriter.DeleteSet was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockDeleteSet.Lock()
	mock.calls.DeleteSet = append(mock.calls.DeleteSet, callInfo)
	mock.lockDeleteSet.Unlock()
	return mock.DeleteSetFunc(ctx, id)
}

// DeleteSetCalls gets all the calls that were made to DeleteSet.
// Check the length with:
//     len(mockedDeviceReaderWriter.DeleteSetCalls())
func (mock *DeviceReaderWriterMock) DeleteSetCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockDeleteSet.RLock()
	calls = mock.calls.DeleteSet
	mock.lockDeleteSet.RUnlock()
	return calls
}

// GetDefaultNamespace calls GetDefaultNamespaceFunc.
func (mock *DeviceReaderWriterMock) GetDefaultNamespace(ctx context.Context) (entity.Namespace, error) {
	if mock.GetDefaultNamespaceFunc == nil {
		panic("DeviceReaderWriterMock.GetDefaultNamespaceFunc: method is nil but DeviceReaderWriter.GetDefaultNamespace was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetDefaultNamespace.Lock()
	mock.calls.GetDefaultNamespace = append(mock.calls.GetDefaultNamespace, callInfo)
	mock.lockGetDefaultNamespace.Unlock()
	return mock.GetDefaultNamespaceFunc(ctx)
}

// GetDefaultNamespaceCalls gets all the calls that were made to GetDefaultNamespace.
// Check the length with:
//     len(mockedDeviceReaderWriter.GetDefaultNamespaceCalls())
func (mock *DeviceReaderWriterMock) GetDefaultNamespaceCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetDefaultNamespace.RLock()
	calls = mock.calls.GetDefaultNamespace
	mock.lockGetDefaultNamespace.RUnlock()
	return calls
}

// GetDevice calls GetDeviceFunc.
func (mock *DeviceReaderWriterMock) GetDevice(ctx context.Context, id string) (entity.Device, error) {
	if mock.GetDeviceFunc == nil {
		panic("DeviceReaderWriterMock.GetDeviceFunc: method is nil but DeviceReaderWriter.GetDevice was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetDevice.Lock()
	mock.calls.GetDevice = append(mock.calls.GetDevice, callInfo)
	mock.lockGetDevice.Unlock()
	return mock.GetDeviceFunc(ctx, id)
}

// GetDeviceCalls gets all the calls that were made to GetDevice.
// Check the length with:
//     len(mockedDeviceReaderWriter.GetDeviceCalls())
func (mock *DeviceReaderWriterMock) GetDeviceCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockGetDevice.RLock()
	calls = mock.calls.GetDevice
	mock.lockGetDevice.RUnlock()
	return calls
}

// GetDevices calls GetDevicesFunc.
func (mock *DeviceReaderWriterMock) GetDevices(ctx context.Context) ([]entity.Device, error) {
	if mock.GetDevicesFunc == nil {
		panic("DeviceReaderWriterMock.GetDevicesFunc: method is nil but DeviceReaderWriter.GetDevices was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetDevices.Lock()
	mock.calls.GetDevices = append(mock.calls.GetDevices, callInfo)
	mock.lockGetDevices.Unlock()
	return mock.GetDevicesFunc(ctx)
}

// GetDevicesCalls gets all the calls that were made to GetDevices.
// Check the length with:
//     len(mockedDeviceReaderWriter.GetDevicesCalls())
func (mock *DeviceReaderWriterMock) GetDevicesCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetDevices.RLock()
	calls = mock.calls.GetDevices
	mock.lockGetDevices.RUnlock()
	return calls
}

// GetNamespace calls GetNamespaceFunc.
func (mock *DeviceReaderWriterMock) GetNamespace(ctx context.Context, id string) (entity.Namespace, error) {
	if mock.GetNamespaceFunc == nil {
		panic("DeviceReaderWriterMock.GetNamespaceFunc: method is nil but DeviceReaderWriter.GetNamespace was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetNamespace.Lock()
	mock.calls.GetNamespace = append(mock.calls.GetNamespace, callInfo)
	mock.lockGetNamespace.Unlock()
	return mock.GetNamespaceFunc(ctx, id)
}

// GetNamespaceCalls gets all the calls that were made to GetNamespace.
// Check the length with:
//     len(mockedDeviceReaderWriter.GetNamespaceCalls())
func (mock *DeviceReaderWriterMock) GetNamespaceCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockGetNamespace.RLock()
	calls = mock.calls.GetNamespace
	mock.lockGetNamespace.RUnlock()
	return calls
}

// GetNamespaces calls GetNamespacesFunc.
func (mock *DeviceReaderWriterMock) GetNamespaces(ctx context.Context) ([]entity.Namespace, error) {
	if mock.GetNamespacesFunc == nil {
		panic("DeviceReaderWriterMock.GetNamespacesFunc: method is nil but DeviceReaderWriter.GetNamespaces was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetNamespaces.Lock()
	mock.calls.GetNamespaces = append(mock.calls.GetNamespaces, callInfo)
	mock.lockGetNamespaces.Unlock()
	return mock.GetNamespacesFunc(ctx)
}

// GetNamespacesCalls gets all the calls that were made to GetNamespaces.
// Check the length with:
//     len(mockedDeviceReaderWriter.GetNamespacesCalls())
func (mock *DeviceReaderWriterMock) GetNamespacesCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetNamespaces.RLock()
	calls = mock.calls.GetNamespaces
	mock.lockGetNamespaces.RUnlock()
	return calls
}

// GetSet calls GetSetFunc.
func (mock *DeviceReaderWriterMock) GetSet(ctx context.Context, id string) (entity.Set, error) {
	if mock.GetSetFunc == nil {
		panic("DeviceReaderWriterMock.GetSetFunc: method is nil but DeviceReaderWriter.GetSet was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetSet.Lock()
	mock.calls.GetSet = append(mock.calls.GetSet, callInfo)
	mock.lockGetSet.Unlock()
	return mock.GetSetFunc(ctx, id)
}

// GetSetCalls gets all the calls that were made to GetSet.
// Check the length with:
//     len(mockedDeviceReaderWriter.GetSetCalls())
func (mock *DeviceReaderWriterMock) GetSetCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockGetSet.RLock()
	calls = mock.calls.GetSet
	mock.lockGetSet.RUnlock()
	return calls
}

// GetSets calls GetSetsFunc.
func (mock *DeviceReaderWriterMock) GetSets(ctx context.Context) ([]entity.Set, error) {
	if mock.GetSetsFunc == nil {
		panic("DeviceReaderWriterMock.GetSetsFunc: method is nil but DeviceReaderWriter.GetSets was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetSets.Lock()
	mock.calls.GetSets = append(mock.calls.GetSets, callInfo)
	mock.lockGetSets.Unlock()
	return mock.GetSetsFunc(ctx)
}

// GetSetsCalls gets all the calls that were made to GetSets.
// Check the length with:
//     len(mockedDeviceReaderWriter.GetSetsCalls())
func (mock *DeviceReaderWriterMock) GetSetsCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetSets.RLock()
	calls = mock.calls.GetSets
	mock.lockGetSets.RUnlock()
	return calls
}

// UpdateDevice calls UpdateDeviceFunc.
func (mock *DeviceReaderWriterMock) UpdateDevice(ctx context.Context, device entity.Device) error {
	if mock.UpdateDeviceFunc == nil {
		panic("DeviceReaderWriterMock.UpdateDeviceFunc: method is nil but DeviceReaderWriter.UpdateDevice was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Device entity.Device
	}{
		Ctx:    ctx,
		Device: device,
	}
	mock.lockUpdateDevice.Lock()
	mock.calls.UpdateDevice = append(mock.calls.UpdateDevice, callInfo)
	mock.lockUpdateDevice.Unlock()
	return mock.UpdateDeviceFunc(ctx, device)
}

// UpdateDeviceCalls gets all the calls that were made to UpdateDevice.
// Check the length with:
//     len(mockedDeviceReaderWriter.UpdateDeviceCalls())
func (mock *DeviceReaderWriterMock) UpdateDeviceCalls() []struct {
	Ctx    context.Context
	Device entity.Device
} {
	var calls []struct {
		Ctx    context.Context
		Device entity.Device
	}
	mock.lockUpdateDevice.RLock()
	calls = mock.calls.UpdateDevice
	mock.lockUpdateDevice.RUnlock()
	return calls
}

// UpdateNamespace calls UpdateNamespaceFunc.
func (mock *DeviceReaderWriterMock) UpdateNamespace(ctx context.Context, namespace entity.Namespace) error {
	if mock.UpdateNamespaceFunc == nil {
		panic("DeviceReaderWriterMock.UpdateNamespaceFunc: method is nil but DeviceReaderWriter.UpdateNamespace was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Namespace entity.Namespace
	}{
		Ctx:       ctx,
		Namespace: namespace,
	}
	mock.lockUpdateNamespace.Lock()
	mock.calls.UpdateNamespace = append(mock.calls.UpdateNamespace, callInfo)
	mock.lockUpdateNamespace.Unlock()
	return mock.UpdateNamespaceFunc(ctx, namespace)
}

// UpdateNamespaceCalls gets all the calls that were made to UpdateNamespace.
// Check the length with:
//     len(mockedDeviceReaderWriter.UpdateNamespaceCalls())
func (mock *DeviceReaderWriterMock) UpdateNamespaceCalls() []struct {
	Ctx       context.Context
	Namespace entity.Namespace
} {
	var calls []struct {
		Ctx       context.Context
		Namespace entity.Namespace
	}
	mock.lockUpdateNamespace.RLock()
	calls = mock.calls.UpdateNamespace
	mock.lockUpdateNamespace.RUnlock()
	return calls
}
