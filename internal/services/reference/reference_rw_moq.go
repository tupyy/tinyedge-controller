// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package reference

import (
	"context"
	"github.com/tupyy/tinyedge-controller/internal/entity"
	"sync"
)

// Ensure, that ReferenceReaderWriterMock does implement ReferenceReaderWriter.
// If this is not the case, regenerate this file with moq.
var _ ReferenceReaderWriter = &ReferenceReaderWriterMock{}

// ReferenceReaderWriterMock is a mock implementation of ReferenceReaderWriter.
//
//	func TestSomethingThatUsesReferenceReaderWriter(t *testing.T) {
//
//		// make and configure a mocked ReferenceReaderWriter
//		mockedReferenceReaderWriter := &ReferenceReaderWriterMock{
//			CreateRelationFunc: func(ctx context.Context, relation entity.ReferenceRelation) error {
//				panic("mock out the CreateRelation method")
//			},
//			DeleteReferenceFunc: func(ctx context.Context, ref entity.ManifestReference) error {
//				panic("mock out the DeleteReference method")
//			},
//			DeleteRelationFunc: func(ctx context.Context, relation entity.ReferenceRelation) error {
//				panic("mock out the DeleteRelation method")
//			},
//			GetDeviceReferencesFunc: func(ctx context.Context, deviceID string) ([]entity.ManifestReference, error) {
//				panic("mock out the GetDeviceReferences method")
//			},
//			GetNamespaceReferencesFunc: func(ctx context.Context, setID string) ([]entity.ManifestReference, error) {
//				panic("mock out the GetNamespaceReferences method")
//			},
//			GetReferenceFunc: func(ctx context.Context, id string) (entity.ManifestReference, error) {
//				panic("mock out the GetReference method")
//			},
//			GetReferencesFunc: func(ctx context.Context, repo entity.Repository) ([]entity.ManifestReference, error) {
//				panic("mock out the GetReferences method")
//			},
//			GetSetReferencesFunc: func(ctx context.Context, setID string) ([]entity.ManifestReference, error) {
//				panic("mock out the GetSetReferences method")
//			},
//			InsertReferenceFunc: func(ctx context.Context, ref entity.ManifestReference) error {
//				panic("mock out the InsertReference method")
//			},
//			UpdateReferenceFunc: func(ctx context.Context, ref entity.ManifestReference) error {
//				panic("mock out the UpdateReference method")
//			},
//		}
//
//		// use mockedReferenceReaderWriter in code that requires ReferenceReaderWriter
//		// and then make assertions.
//
//	}
type ReferenceReaderWriterMock struct {
	// CreateRelationFunc mocks the CreateRelation method.
	CreateRelationFunc func(ctx context.Context, relation entity.ReferenceRelation) error

	// DeleteReferenceFunc mocks the DeleteReference method.
	DeleteReferenceFunc func(ctx context.Context, ref entity.Reference) error

	// DeleteRelationFunc mocks the DeleteRelation method.
	DeleteRelationFunc func(ctx context.Context, relation entity.ReferenceRelation) error

	// GetDeviceReferencesFunc mocks the GetDeviceReferences method.
	GetDeviceReferencesFunc func(ctx context.Context, deviceID string) ([]entity.Reference, error)

	// GetNamespaceReferencesFunc mocks the GetNamespaceReferences method.
	GetNamespaceReferencesFunc func(ctx context.Context, setID string) ([]entity.Reference, error)

	// GetReferenceFunc mocks the GetReference method.
	GetReferenceFunc func(ctx context.Context, id string) (entity.Reference, error)

	// GetReferencesFunc mocks the GetReferences method.
	GetReferencesFunc func(ctx context.Context, repo entity.Repository) ([]entity.Reference, error)

	// GetSetReferencesFunc mocks the GetSetReferences method.
	GetSetReferencesFunc func(ctx context.Context, setID string) ([]entity.Reference, error)

	// InsertReferenceFunc mocks the InsertReference method.
	InsertReferenceFunc func(ctx context.Context, ref entity.Reference) error

	// UpdateReferenceFunc mocks the UpdateReference method.
	UpdateReferenceFunc func(ctx context.Context, ref entity.Reference) error

	// calls tracks calls to the methods.
	calls struct {
		// CreateRelation holds details about calls to the CreateRelation method.
		CreateRelation []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Relation is the relation argument value.
			Relation entity.ReferenceRelation
		}
		// DeleteReference holds details about calls to the DeleteReference method.
		DeleteReference []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Ref is the ref argument value.
			Ref entity.Reference
		}
		// DeleteRelation holds details about calls to the DeleteRelation method.
		DeleteRelation []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Relation is the relation argument value.
			Relation entity.ReferenceRelation
		}
		// GetDeviceReferences holds details about calls to the GetDeviceReferences method.
		GetDeviceReferences []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// DeviceID is the deviceID argument value.
			DeviceID string
		}
		// GetNamespaceReferences holds details about calls to the GetNamespaceReferences method.
		GetNamespaceReferences []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// SetID is the setID argument value.
			SetID string
		}
		// GetReference holds details about calls to the GetReference method.
		GetReference []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// GetReferences holds details about calls to the GetReferences method.
		GetReferences []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Repo is the repo argument value.
			Repo entity.Repository
		}
		// GetSetReferences holds details about calls to the GetSetReferences method.
		GetSetReferences []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// SetID is the setID argument value.
			SetID string
		}
		// InsertReference holds details about calls to the InsertReference method.
		InsertReference []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Ref is the ref argument value.
			Ref entity.Reference
		}
		// UpdateReference holds details about calls to the UpdateReference method.
		UpdateReference []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Ref is the ref argument value.
			Ref entity.Reference
		}
	}
	lockCreateRelation         sync.RWMutex
	lockDeleteReference        sync.RWMutex
	lockDeleteRelation         sync.RWMutex
	lockGetDeviceReferences    sync.RWMutex
	lockGetNamespaceReferences sync.RWMutex
	lockGetReference           sync.RWMutex
	lockGetReferences          sync.RWMutex
	lockGetSetReferences       sync.RWMutex
	lockInsertReference        sync.RWMutex
	lockUpdateReference        sync.RWMutex
}

// CreateRelation calls CreateRelationFunc.
func (mock *ReferenceReaderWriterMock) CreateRelation(ctx context.Context, relation entity.ReferenceRelation) error {
	if mock.CreateRelationFunc == nil {
		panic("ReferenceReaderWriterMock.CreateRelationFunc: method is nil but ReferenceReaderWriter.CreateRelation was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Relation entity.ReferenceRelation
	}{
		Ctx:      ctx,
		Relation: relation,
	}
	mock.lockCreateRelation.Lock()
	mock.calls.CreateRelation = append(mock.calls.CreateRelation, callInfo)
	mock.lockCreateRelation.Unlock()
	return mock.CreateRelationFunc(ctx, relation)
}

// CreateRelationCalls gets all the calls that were made to CreateRelation.
// Check the length with:
//
//	len(mockedReferenceReaderWriter.CreateRelationCalls())
func (mock *ReferenceReaderWriterMock) CreateRelationCalls() []struct {
	Ctx      context.Context
	Relation entity.ReferenceRelation
} {
	var calls []struct {
		Ctx      context.Context
		Relation entity.ReferenceRelation
	}
	mock.lockCreateRelation.RLock()
	calls = mock.calls.CreateRelation
	mock.lockCreateRelation.RUnlock()
	return calls
}

// DeleteReference calls DeleteReferenceFunc.
func (mock *ReferenceReaderWriterMock) DeleteReference(ctx context.Context, ref entity.Reference) error {
	if mock.DeleteReferenceFunc == nil {
		panic("ReferenceReaderWriterMock.DeleteReferenceFunc: method is nil but ReferenceReaderWriter.DeleteReference was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Ref entity.Reference
	}{
		Ctx: ctx,
		Ref: ref,
	}
	mock.lockDeleteReference.Lock()
	mock.calls.DeleteReference = append(mock.calls.DeleteReference, callInfo)
	mock.lockDeleteReference.Unlock()
	return mock.DeleteReferenceFunc(ctx, ref)
}

// DeleteReferenceCalls gets all the calls that were made to DeleteReference.
// Check the length with:
//
//	len(mockedReferenceReaderWriter.DeleteReferenceCalls())
func (mock *ReferenceReaderWriterMock) DeleteReferenceCalls() []struct {
	Ctx context.Context
	Ref entity.Reference
} {
	var calls []struct {
		Ctx context.Context
		Ref entity.Reference
	}
	mock.lockDeleteReference.RLock()
	calls = mock.calls.DeleteReference
	mock.lockDeleteReference.RUnlock()
	return calls
}

// DeleteRelation calls DeleteRelationFunc.
func (mock *ReferenceReaderWriterMock) DeleteRelation(ctx context.Context, relation entity.ReferenceRelation) error {
	if mock.DeleteRelationFunc == nil {
		panic("ReferenceReaderWriterMock.DeleteRelationFunc: method is nil but ReferenceReaderWriter.DeleteRelation was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Relation entity.ReferenceRelation
	}{
		Ctx:      ctx,
		Relation: relation,
	}
	mock.lockDeleteRelation.Lock()
	mock.calls.DeleteRelation = append(mock.calls.DeleteRelation, callInfo)
	mock.lockDeleteRelation.Unlock()
	return mock.DeleteRelationFunc(ctx, relation)
}

// DeleteRelationCalls gets all the calls that were made to DeleteRelation.
// Check the length with:
//
//	len(mockedReferenceReaderWriter.DeleteRelationCalls())
func (mock *ReferenceReaderWriterMock) DeleteRelationCalls() []struct {
	Ctx      context.Context
	Relation entity.ReferenceRelation
} {
	var calls []struct {
		Ctx      context.Context
		Relation entity.ReferenceRelation
	}
	mock.lockDeleteRelation.RLock()
	calls = mock.calls.DeleteRelation
	mock.lockDeleteRelation.RUnlock()
	return calls
}

// GetDeviceReferences calls GetDeviceReferencesFunc.
func (mock *ReferenceReaderWriterMock) GetDeviceReferences(ctx context.Context, deviceID string) ([]entity.Reference, error) {
	if mock.GetDeviceReferencesFunc == nil {
		panic("ReferenceReaderWriterMock.GetDeviceReferencesFunc: method is nil but ReferenceReaderWriter.GetDeviceReferences was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		DeviceID string
	}{
		Ctx:      ctx,
		DeviceID: deviceID,
	}
	mock.lockGetDeviceReferences.Lock()
	mock.calls.GetDeviceReferences = append(mock.calls.GetDeviceReferences, callInfo)
	mock.lockGetDeviceReferences.Unlock()
	return mock.GetDeviceReferencesFunc(ctx, deviceID)
}

// GetDeviceReferencesCalls gets all the calls that were made to GetDeviceReferences.
// Check the length with:
//
//	len(mockedReferenceReaderWriter.GetDeviceReferencesCalls())
func (mock *ReferenceReaderWriterMock) GetDeviceReferencesCalls() []struct {
	Ctx      context.Context
	DeviceID string
} {
	var calls []struct {
		Ctx      context.Context
		DeviceID string
	}
	mock.lockGetDeviceReferences.RLock()
	calls = mock.calls.GetDeviceReferences
	mock.lockGetDeviceReferences.RUnlock()
	return calls
}

// GetNamespaceReferences calls GetNamespaceReferencesFunc.
func (mock *ReferenceReaderWriterMock) GetNamespaceReferences(ctx context.Context, setID string) ([]entity.Reference, error) {
	if mock.GetNamespaceReferencesFunc == nil {
		panic("ReferenceReaderWriterMock.GetNamespaceReferencesFunc: method is nil but ReferenceReaderWriter.GetNamespaceReferences was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		SetID string
	}{
		Ctx:   ctx,
		SetID: setID,
	}
	mock.lockGetNamespaceReferences.Lock()
	mock.calls.GetNamespaceReferences = append(mock.calls.GetNamespaceReferences, callInfo)
	mock.lockGetNamespaceReferences.Unlock()
	return mock.GetNamespaceReferencesFunc(ctx, setID)
}

// GetNamespaceReferencesCalls gets all the calls that were made to GetNamespaceReferences.
// Check the length with:
//
//	len(mockedReferenceReaderWriter.GetNamespaceReferencesCalls())
func (mock *ReferenceReaderWriterMock) GetNamespaceReferencesCalls() []struct {
	Ctx   context.Context
	SetID string
} {
	var calls []struct {
		Ctx   context.Context
		SetID string
	}
	mock.lockGetNamespaceReferences.RLock()
	calls = mock.calls.GetNamespaceReferences
	mock.lockGetNamespaceReferences.RUnlock()
	return calls
}

// GetReference calls GetReferenceFunc.
func (mock *ReferenceReaderWriterMock) GetReference(ctx context.Context, id string) (entity.Reference, error) {
	if mock.GetReferenceFunc == nil {
		panic("ReferenceReaderWriterMock.GetReferenceFunc: method is nil but ReferenceReaderWriter.GetReference was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetReference.Lock()
	mock.calls.GetReference = append(mock.calls.GetReference, callInfo)
	mock.lockGetReference.Unlock()
	return mock.GetReferenceFunc(ctx, id)
}

// GetReferenceCalls gets all the calls that were made to GetReference.
// Check the length with:
//
//	len(mockedReferenceReaderWriter.GetReferenceCalls())
func (mock *ReferenceReaderWriterMock) GetReferenceCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockGetReference.RLock()
	calls = mock.calls.GetReference
	mock.lockGetReference.RUnlock()
	return calls
}

// GetReferences calls GetReferencesFunc.
func (mock *ReferenceReaderWriterMock) GetReferences(ctx context.Context, repo entity.Repository) ([]entity.Reference, error) {
	if mock.GetReferencesFunc == nil {
		panic("ReferenceReaderWriterMock.GetReferencesFunc: method is nil but ReferenceReaderWriter.GetReferences was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Repo entity.Repository
	}{
		Ctx:  ctx,
		Repo: repo,
	}
	mock.lockGetReferences.Lock()
	mock.calls.GetReferences = append(mock.calls.GetReferences, callInfo)
	mock.lockGetReferences.Unlock()
	return mock.GetReferencesFunc(ctx, repo)
}

// GetReferencesCalls gets all the calls that were made to GetReferences.
// Check the length with:
//
//	len(mockedReferenceReaderWriter.GetReferencesCalls())
func (mock *ReferenceReaderWriterMock) GetReferencesCalls() []struct {
	Ctx  context.Context
	Repo entity.Repository
} {
	var calls []struct {
		Ctx  context.Context
		Repo entity.Repository
	}
	mock.lockGetReferences.RLock()
	calls = mock.calls.GetReferences
	mock.lockGetReferences.RUnlock()
	return calls
}

// GetSetReferences calls GetSetReferencesFunc.
func (mock *ReferenceReaderWriterMock) GetSetReferences(ctx context.Context, setID string) ([]entity.Reference, error) {
	if mock.GetSetReferencesFunc == nil {
		panic("ReferenceReaderWriterMock.GetSetReferencesFunc: method is nil but ReferenceReaderWriter.GetSetReferences was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		SetID string
	}{
		Ctx:   ctx,
		SetID: setID,
	}
	mock.lockGetSetReferences.Lock()
	mock.calls.GetSetReferences = append(mock.calls.GetSetReferences, callInfo)
	mock.lockGetSetReferences.Unlock()
	return mock.GetSetReferencesFunc(ctx, setID)
}

// GetSetReferencesCalls gets all the calls that were made to GetSetReferences.
// Check the length with:
//
//	len(mockedReferenceReaderWriter.GetSetReferencesCalls())
func (mock *ReferenceReaderWriterMock) GetSetReferencesCalls() []struct {
	Ctx   context.Context
	SetID string
} {
	var calls []struct {
		Ctx   context.Context
		SetID string
	}
	mock.lockGetSetReferences.RLock()
	calls = mock.calls.GetSetReferences
	mock.lockGetSetReferences.RUnlock()
	return calls
}

// InsertReference calls InsertReferenceFunc.
func (mock *ReferenceReaderWriterMock) InsertReference(ctx context.Context, ref entity.Reference) error {
	if mock.InsertReferenceFunc == nil {
		panic("ReferenceReaderWriterMock.InsertReferenceFunc: method is nil but ReferenceReaderWriter.InsertReference was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Ref entity.Reference
	}{
		Ctx: ctx,
		Ref: ref,
	}
	mock.lockInsertReference.Lock()
	mock.calls.InsertReference = append(mock.calls.InsertReference, callInfo)
	mock.lockInsertReference.Unlock()
	return mock.InsertReferenceFunc(ctx, ref)
}

// InsertReferenceCalls gets all the calls that were made to InsertReference.
// Check the length with:
//
//	len(mockedReferenceReaderWriter.InsertReferenceCalls())
func (mock *ReferenceReaderWriterMock) InsertReferenceCalls() []struct {
	Ctx context.Context
	Ref entity.Reference
} {
	var calls []struct {
		Ctx context.Context
		Ref entity.Reference
	}
	mock.lockInsertReference.RLock()
	calls = mock.calls.InsertReference
	mock.lockInsertReference.RUnlock()
	return calls
}

// UpdateReference calls UpdateReferenceFunc.
func (mock *ReferenceReaderWriterMock) UpdateReference(ctx context.Context, ref entity.Reference) error {
	if mock.UpdateReferenceFunc == nil {
		panic("ReferenceReaderWriterMock.UpdateReferenceFunc: method is nil but ReferenceReaderWriter.UpdateReference was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Ref entity.Reference
	}{
		Ctx: ctx,
		Ref: ref,
	}
	mock.lockUpdateReference.Lock()
	mock.calls.UpdateReference = append(mock.calls.UpdateReference, callInfo)
	mock.lockUpdateReference.Unlock()
	return mock.UpdateReferenceFunc(ctx, ref)
}

// UpdateReferenceCalls gets all the calls that were made to UpdateReference.
// Check the length with:
//
//	len(mockedReferenceReaderWriter.UpdateReferenceCalls())
func (mock *ReferenceReaderWriterMock) UpdateReferenceCalls() []struct {
	Ctx context.Context
	Ref entity.Reference
} {
	var calls []struct {
		Ctx context.Context
		Ref entity.Reference
	}
	mock.lockUpdateReference.RLock()
	calls = mock.calls.UpdateReference
	mock.lockUpdateReference.RUnlock()
	return calls
}
