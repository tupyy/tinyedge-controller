// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package edge

import (
	"context"
	"github.com/tupyy/tinyedge-controller/internal/entity"
	"sync"
)

// Ensure, that DeviceReaderWriterMock does implement DeviceReaderWriter.
// If this is not the case, regenerate this file with moq.
var _ DeviceReaderWriter = &DeviceReaderWriterMock{}

// DeviceReaderWriterMock is a mock implementation of DeviceReaderWriter.
//
// 	func TestSomethingThatUsesDeviceReaderWriter(t *testing.T) {
//
// 		// make and configure a mocked DeviceReaderWriter
// 		mockedDeviceReaderWriter := &DeviceReaderWriterMock{
// 			CreateDeviceFunc: func(ctx context.Context, device entity.Device) error {
// 				panic("mock out the CreateDevice method")
// 			},
// 			GetDeviceFunc: func(ctx context.Context, id string) (entity.Device, error) {
// 				panic("mock out the GetDevice method")
// 			},
// 			UpdateDeviceFunc: func(ctx context.Context, device entity.Device) error {
// 				panic("mock out the UpdateDevice method")
// 			},
// 		}
//
// 		// use mockedDeviceReaderWriter in code that requires DeviceReaderWriter
// 		// and then make assertions.
//
// 	}
type DeviceReaderWriterMock struct {
	// CreateDeviceFunc mocks the CreateDevice method.
	CreateDeviceFunc func(ctx context.Context, device entity.Device) error

	// GetDeviceFunc mocks the GetDevice method.
	GetDeviceFunc func(ctx context.Context, id string) (entity.Device, error)

	// UpdateDeviceFunc mocks the UpdateDevice method.
	UpdateDeviceFunc func(ctx context.Context, device entity.Device) error

	// calls tracks calls to the methods.
	calls struct {
		// CreateDevice holds details about calls to the CreateDevice method.
		CreateDevice []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Device is the device argument value.
			Device entity.Device
		}
		// GetDevice holds details about calls to the GetDevice method.
		GetDevice []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// UpdateDevice holds details about calls to the UpdateDevice method.
		UpdateDevice []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Device is the device argument value.
			Device entity.Device
		}
	}
	lockCreateDevice sync.RWMutex
	lockGetDevice    sync.RWMutex
	lockUpdateDevice sync.RWMutex
}

// CreateDevice calls CreateDeviceFunc.
func (mock *DeviceReaderWriterMock) CreateDevice(ctx context.Context, device entity.Device) error {
	if mock.CreateDeviceFunc == nil {
		panic("DeviceReaderWriterMock.CreateDeviceFunc: method is nil but DeviceReaderWriter.CreateDevice was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Device entity.Device
	}{
		Ctx:    ctx,
		Device: device,
	}
	mock.lockCreateDevice.Lock()
	mock.calls.CreateDevice = append(mock.calls.CreateDevice, callInfo)
	mock.lockCreateDevice.Unlock()
	return mock.CreateDeviceFunc(ctx, device)
}

// CreateDeviceCalls gets all the calls that were made to CreateDevice.
// Check the length with:
//     len(mockedDeviceReaderWriter.CreateDeviceCalls())
func (mock *DeviceReaderWriterMock) CreateDeviceCalls() []struct {
	Ctx    context.Context
	Device entity.Device
} {
	var calls []struct {
		Ctx    context.Context
		Device entity.Device
	}
	mock.lockCreateDevice.RLock()
	calls = mock.calls.CreateDevice
	mock.lockCreateDevice.RUnlock()
	return calls
}

// GetDevice calls GetDeviceFunc.
func (mock *DeviceReaderWriterMock) GetDevice(ctx context.Context, id string) (entity.Device, error) {
	if mock.GetDeviceFunc == nil {
		panic("DeviceReaderWriterMock.GetDeviceFunc: method is nil but DeviceReaderWriter.GetDevice was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetDevice.Lock()
	mock.calls.GetDevice = append(mock.calls.GetDevice, callInfo)
	mock.lockGetDevice.Unlock()
	return mock.GetDeviceFunc(ctx, id)
}

// GetDeviceCalls gets all the calls that were made to GetDevice.
// Check the length with:
//     len(mockedDeviceReaderWriter.GetDeviceCalls())
func (mock *DeviceReaderWriterMock) GetDeviceCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockGetDevice.RLock()
	calls = mock.calls.GetDevice
	mock.lockGetDevice.RUnlock()
	return calls
}

// UpdateDevice calls UpdateDeviceFunc.
func (mock *DeviceReaderWriterMock) UpdateDevice(ctx context.Context, device entity.Device) error {
	if mock.UpdateDeviceFunc == nil {
		panic("DeviceReaderWriterMock.UpdateDeviceFunc: method is nil but DeviceReaderWriter.UpdateDevice was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Device entity.Device
	}{
		Ctx:    ctx,
		Device: device,
	}
	mock.lockUpdateDevice.Lock()
	mock.calls.UpdateDevice = append(mock.calls.UpdateDevice, callInfo)
	mock.lockUpdateDevice.Unlock()
	return mock.UpdateDeviceFunc(ctx, device)
}

// UpdateDeviceCalls gets all the calls that were made to UpdateDevice.
// Check the length with:
//     len(mockedDeviceReaderWriter.UpdateDeviceCalls())
func (mock *DeviceReaderWriterMock) UpdateDeviceCalls() []struct {
	Ctx    context.Context
	Device entity.Device
} {
	var calls []struct {
		Ctx    context.Context
		Device entity.Device
	}
	mock.lockUpdateDevice.RLock()
	calls = mock.calls.UpdateDevice
	mock.lockUpdateDevice.RUnlock()
	return calls
}
