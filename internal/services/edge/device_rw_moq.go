// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package edge

import (
	"context"
	"github.com/tupyy/tinyedge-controller/internal/entity"
	"sync"
)

// Ensure, that DeviceReaderWriterMock does implement DeviceReaderWriter.
// If this is not the case, regenerate this file with moq.
var _ DeviceReaderWriter = &DeviceReaderWriterMock{}

// DeviceReaderWriterMock is a mock implementation of DeviceReaderWriter.
//
//	func TestSomethingThatUsesDeviceReaderWriter(t *testing.T) {
//
//		// make and configure a mocked DeviceReaderWriter
//		mockedDeviceReaderWriter := &DeviceReaderWriterMock{
//			CreateFunc: func(ctx context.Context, device entity.Device) error {
//				panic("mock out the Create method")
//			},
//			GetDeviceFunc: func(ctx context.Context, id string) (entity.Device, error) {
//				panic("mock out the GetDevice method")
//			},
//			UpdateFunc: func(ctx context.Context, device entity.Device) error {
//				panic("mock out the Update method")
//			},
//		}
//
//		// use mockedDeviceReaderWriter in code that requires DeviceReaderWriter
//		// and then make assertions.
//
//	}
type DeviceReaderWriterMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(ctx context.Context, device entity.Device) error

	// GetDeviceFunc mocks the GetDevice method.
	GetDeviceFunc func(ctx context.Context, id string) (entity.Device, error)

	// UpdateFunc mocks the Update method.
	UpdateFunc func(ctx context.Context, device entity.Device) error

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Device is the device argument value.
			Device entity.Device
		}
		// GetDevice holds details about calls to the GetDevice method.
		GetDevice []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Device is the device argument value.
			Device entity.Device
		}
	}
	lockCreate    sync.RWMutex
	lockGetDevice sync.RWMutex
	lockUpdate    sync.RWMutex
}

// Create calls CreateFunc.
func (mock *DeviceReaderWriterMock) Create(ctx context.Context, device entity.Device) error {
	if mock.CreateFunc == nil {
		panic("DeviceReaderWriterMock.CreateFunc: method is nil but DeviceReaderWriter.Create was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Device entity.Device
	}{
		Ctx:    ctx,
		Device: device,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	return mock.CreateFunc(ctx, device)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//
//	len(mockedDeviceReaderWriter.CreateCalls())
func (mock *DeviceReaderWriterMock) CreateCalls() []struct {
	Ctx    context.Context
	Device entity.Device
} {
	var calls []struct {
		Ctx    context.Context
		Device entity.Device
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}

// GetDevice calls GetDeviceFunc.
func (mock *DeviceReaderWriterMock) GetDevice(ctx context.Context, id string) (entity.Device, error) {
	if mock.GetDeviceFunc == nil {
		panic("DeviceReaderWriterMock.GetDeviceFunc: method is nil but DeviceReaderWriter.GetDevice was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetDevice.Lock()
	mock.calls.GetDevice = append(mock.calls.GetDevice, callInfo)
	mock.lockGetDevice.Unlock()
	return mock.GetDeviceFunc(ctx, id)
}

// GetDeviceCalls gets all the calls that were made to GetDevice.
// Check the length with:
//
//	len(mockedDeviceReaderWriter.GetDeviceCalls())
func (mock *DeviceReaderWriterMock) GetDeviceCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockGetDevice.RLock()
	calls = mock.calls.GetDevice
	mock.lockGetDevice.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *DeviceReaderWriterMock) Update(ctx context.Context, device entity.Device) error {
	if mock.UpdateFunc == nil {
		panic("DeviceReaderWriterMock.UpdateFunc: method is nil but DeviceReaderWriter.Update was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Device entity.Device
	}{
		Ctx:    ctx,
		Device: device,
	}
	mock.lockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	mock.lockUpdate.Unlock()
	return mock.UpdateFunc(ctx, device)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//
//	len(mockedDeviceReaderWriter.UpdateCalls())
func (mock *DeviceReaderWriterMock) UpdateCalls() []struct {
	Ctx    context.Context
	Device entity.Device
} {
	var calls []struct {
		Ctx    context.Context
		Device entity.Device
	}
	mock.lockUpdate.RLock()
	calls = mock.calls.Update
	mock.lockUpdate.RUnlock()
	return calls
}
