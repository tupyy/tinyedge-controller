// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.11
// source: admin.proto

package admin

import (
	context "context"
	common "github.com/tupyy/tinyedge-controller/pkg/grpc/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AdminServiceClient is the client API for AdminService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminServiceClient interface {
	// GetDevices returns a list of devices.
	GetDevices(ctx context.Context, in *DevicesListRequest, opts ...grpc.CallOption) (*DevicesListResponse, error)
	// GetDevice returns a device.
	GetDevice(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*common.Device, error)
	// AddWorkloadToSet add a device to a set.
	AddDeviceToSet(ctx context.Context, in *DeviceToSetRequest, opts ...grpc.CallOption) (*common.Empty, error)
	// RemoveDeviceFromSet removes a device from a set.
	RemoveDeviceFromSet(ctx context.Context, in *DeviceToSetRequest, opts ...grpc.CallOption) (*common.Empty, error)
	// GetDeviceSets returns a list of device sets.
	GetDeviceSets(ctx context.Context, in *SetsListRequest, opts ...grpc.CallOption) (*SetsListResponse, error)
	// GetDeviceSet returns a device set.
	GetDeviceSet(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*common.DeviceSet, error)
	// GetWorkloads return a list of workloads
	GetWorkloads(ctx context.Context, in *WorkloadsListRequest, opts ...grpc.CallOption) (*WorkloadsListResponse, error)
	// GetWorkload return a workload
	GetWorkload(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*common.Workload, error)
	// AddWorkloadToDevice add a workload to a device.
	AddWorkloadToDevice(ctx context.Context, in *WorkloadToDeviceRequest, opts ...grpc.CallOption) (*common.Empty, error)
	// RemoveWorkloadFromDevice removes a workload from a device.
	RemoveWorkloadFromDevice(ctx context.Context, in *WorkloadToDeviceRequest, opts ...grpc.CallOption) (*common.Empty, error)
	// AddWorkloadToSet add a workload to a set.
	AddWorkloadToSet(ctx context.Context, in *WorkloadToSetRequest, opts ...grpc.CallOption) (*common.Empty, error)
	// RemoveWorkloadFromSet removes a workload from a set.
	RemoveWorkloadFromSet(ctx context.Context, in *WorkloadToSetRequest, opts ...grpc.CallOption) (*common.Empty, error)
}

type adminServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminServiceClient(cc grpc.ClientConnInterface) AdminServiceClient {
	return &adminServiceClient{cc}
}

func (c *adminServiceClient) GetDevices(ctx context.Context, in *DevicesListRequest, opts ...grpc.CallOption) (*DevicesListResponse, error) {
	out := new(DevicesListResponse)
	err := c.cc.Invoke(ctx, "/AdminService/GetDevices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetDevice(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*common.Device, error) {
	out := new(common.Device)
	err := c.cc.Invoke(ctx, "/AdminService/GetDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) AddDeviceToSet(ctx context.Context, in *DeviceToSetRequest, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/AdminService/AddDeviceToSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) RemoveDeviceFromSet(ctx context.Context, in *DeviceToSetRequest, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/AdminService/RemoveDeviceFromSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetDeviceSets(ctx context.Context, in *SetsListRequest, opts ...grpc.CallOption) (*SetsListResponse, error) {
	out := new(SetsListResponse)
	err := c.cc.Invoke(ctx, "/AdminService/GetDeviceSets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetDeviceSet(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*common.DeviceSet, error) {
	out := new(common.DeviceSet)
	err := c.cc.Invoke(ctx, "/AdminService/GetDeviceSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetWorkloads(ctx context.Context, in *WorkloadsListRequest, opts ...grpc.CallOption) (*WorkloadsListResponse, error) {
	out := new(WorkloadsListResponse)
	err := c.cc.Invoke(ctx, "/AdminService/GetWorkloads", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetWorkload(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*common.Workload, error) {
	out := new(common.Workload)
	err := c.cc.Invoke(ctx, "/AdminService/GetWorkload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) AddWorkloadToDevice(ctx context.Context, in *WorkloadToDeviceRequest, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/AdminService/AddWorkloadToDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) RemoveWorkloadFromDevice(ctx context.Context, in *WorkloadToDeviceRequest, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/AdminService/RemoveWorkloadFromDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) AddWorkloadToSet(ctx context.Context, in *WorkloadToSetRequest, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/AdminService/AddWorkloadToSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) RemoveWorkloadFromSet(ctx context.Context, in *WorkloadToSetRequest, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/AdminService/RemoveWorkloadFromSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminServiceServer is the server API for AdminService service.
// All implementations must embed UnimplementedAdminServiceServer
// for forward compatibility
type AdminServiceServer interface {
	// GetDevices returns a list of devices.
	GetDevices(context.Context, *DevicesListRequest) (*DevicesListResponse, error)
	// GetDevice returns a device.
	GetDevice(context.Context, *IdRequest) (*common.Device, error)
	// AddWorkloadToSet add a device to a set.
	AddDeviceToSet(context.Context, *DeviceToSetRequest) (*common.Empty, error)
	// RemoveDeviceFromSet removes a device from a set.
	RemoveDeviceFromSet(context.Context, *DeviceToSetRequest) (*common.Empty, error)
	// GetDeviceSets returns a list of device sets.
	GetDeviceSets(context.Context, *SetsListRequest) (*SetsListResponse, error)
	// GetDeviceSet returns a device set.
	GetDeviceSet(context.Context, *IdRequest) (*common.DeviceSet, error)
	// GetWorkloads return a list of workloads
	GetWorkloads(context.Context, *WorkloadsListRequest) (*WorkloadsListResponse, error)
	// GetWorkload return a workload
	GetWorkload(context.Context, *IdRequest) (*common.Workload, error)
	// AddWorkloadToDevice add a workload to a device.
	AddWorkloadToDevice(context.Context, *WorkloadToDeviceRequest) (*common.Empty, error)
	// RemoveWorkloadFromDevice removes a workload from a device.
	RemoveWorkloadFromDevice(context.Context, *WorkloadToDeviceRequest) (*common.Empty, error)
	// AddWorkloadToSet add a workload to a set.
	AddWorkloadToSet(context.Context, *WorkloadToSetRequest) (*common.Empty, error)
	// RemoveWorkloadFromSet removes a workload from a set.
	RemoveWorkloadFromSet(context.Context, *WorkloadToSetRequest) (*common.Empty, error)
	mustEmbedUnimplementedAdminServiceServer()
}

// UnimplementedAdminServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAdminServiceServer struct {
}

func (UnimplementedAdminServiceServer) GetDevices(context.Context, *DevicesListRequest) (*DevicesListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDevices not implemented")
}
func (UnimplementedAdminServiceServer) GetDevice(context.Context, *IdRequest) (*common.Device, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDevice not implemented")
}
func (UnimplementedAdminServiceServer) AddDeviceToSet(context.Context, *DeviceToSetRequest) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDeviceToSet not implemented")
}
func (UnimplementedAdminServiceServer) RemoveDeviceFromSet(context.Context, *DeviceToSetRequest) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveDeviceFromSet not implemented")
}
func (UnimplementedAdminServiceServer) GetDeviceSets(context.Context, *SetsListRequest) (*SetsListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceSets not implemented")
}
func (UnimplementedAdminServiceServer) GetDeviceSet(context.Context, *IdRequest) (*common.DeviceSet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceSet not implemented")
}
func (UnimplementedAdminServiceServer) GetWorkloads(context.Context, *WorkloadsListRequest) (*WorkloadsListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkloads not implemented")
}
func (UnimplementedAdminServiceServer) GetWorkload(context.Context, *IdRequest) (*common.Workload, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkload not implemented")
}
func (UnimplementedAdminServiceServer) AddWorkloadToDevice(context.Context, *WorkloadToDeviceRequest) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddWorkloadToDevice not implemented")
}
func (UnimplementedAdminServiceServer) RemoveWorkloadFromDevice(context.Context, *WorkloadToDeviceRequest) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveWorkloadFromDevice not implemented")
}
func (UnimplementedAdminServiceServer) AddWorkloadToSet(context.Context, *WorkloadToSetRequest) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddWorkloadToSet not implemented")
}
func (UnimplementedAdminServiceServer) RemoveWorkloadFromSet(context.Context, *WorkloadToSetRequest) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveWorkloadFromSet not implemented")
}
func (UnimplementedAdminServiceServer) mustEmbedUnimplementedAdminServiceServer() {}

// UnsafeAdminServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminServiceServer will
// result in compilation errors.
type UnsafeAdminServiceServer interface {
	mustEmbedUnimplementedAdminServiceServer()
}

func RegisterAdminServiceServer(s grpc.ServiceRegistrar, srv AdminServiceServer) {
	s.RegisterService(&AdminService_ServiceDesc, srv)
}

func _AdminService_GetDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DevicesListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AdminService/GetDevices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetDevices(ctx, req.(*DevicesListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AdminService/GetDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetDevice(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_AddDeviceToSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceToSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).AddDeviceToSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AdminService/AddDeviceToSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).AddDeviceToSet(ctx, req.(*DeviceToSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_RemoveDeviceFromSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceToSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).RemoveDeviceFromSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AdminService/RemoveDeviceFromSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).RemoveDeviceFromSet(ctx, req.(*DeviceToSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetDeviceSets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetsListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetDeviceSets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AdminService/GetDeviceSets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetDeviceSets(ctx, req.(*SetsListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetDeviceSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetDeviceSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AdminService/GetDeviceSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetDeviceSet(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetWorkloads_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkloadsListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetWorkloads(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AdminService/GetWorkloads",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetWorkloads(ctx, req.(*WorkloadsListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetWorkload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetWorkload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AdminService/GetWorkload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetWorkload(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_AddWorkloadToDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkloadToDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).AddWorkloadToDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AdminService/AddWorkloadToDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).AddWorkloadToDevice(ctx, req.(*WorkloadToDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_RemoveWorkloadFromDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkloadToDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).RemoveWorkloadFromDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AdminService/RemoveWorkloadFromDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).RemoveWorkloadFromDevice(ctx, req.(*WorkloadToDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_AddWorkloadToSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkloadToSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).AddWorkloadToSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AdminService/AddWorkloadToSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).AddWorkloadToSet(ctx, req.(*WorkloadToSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_RemoveWorkloadFromSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkloadToSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).RemoveWorkloadFromSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AdminService/RemoveWorkloadFromSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).RemoveWorkloadFromSet(ctx, req.(*WorkloadToSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AdminService_ServiceDesc is the grpc.ServiceDesc for AdminService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdminService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "AdminService",
	HandlerType: (*AdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDevices",
			Handler:    _AdminService_GetDevices_Handler,
		},
		{
			MethodName: "GetDevice",
			Handler:    _AdminService_GetDevice_Handler,
		},
		{
			MethodName: "AddDeviceToSet",
			Handler:    _AdminService_AddDeviceToSet_Handler,
		},
		{
			MethodName: "RemoveDeviceFromSet",
			Handler:    _AdminService_RemoveDeviceFromSet_Handler,
		},
		{
			MethodName: "GetDeviceSets",
			Handler:    _AdminService_GetDeviceSets_Handler,
		},
		{
			MethodName: "GetDeviceSet",
			Handler:    _AdminService_GetDeviceSet_Handler,
		},
		{
			MethodName: "GetWorkloads",
			Handler:    _AdminService_GetWorkloads_Handler,
		},
		{
			MethodName: "GetWorkload",
			Handler:    _AdminService_GetWorkload_Handler,
		},
		{
			MethodName: "AddWorkloadToDevice",
			Handler:    _AdminService_AddWorkloadToDevice_Handler,
		},
		{
			MethodName: "RemoveWorkloadFromDevice",
			Handler:    _AdminService_RemoveWorkloadFromDevice_Handler,
		},
		{
			MethodName: "AddWorkloadToSet",
			Handler:    _AdminService_AddWorkloadToSet_Handler,
		},
		{
			MethodName: "RemoveWorkloadFromSet",
			Handler:    _AdminService_RemoveWorkloadFromSet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "admin.proto",
}
