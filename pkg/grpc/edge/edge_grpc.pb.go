// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.6
// source: edge.proto

package edge

import (
	context "context"
	common "github.com/tupyy/tinyedge-controller/pkg/grpc/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EdgeServiceClient is the client API for EdgeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EdgeServiceClient interface {
	// Enrol is called by a worker to send the request to enrol the fleet.
	Enrol(ctx context.Context, in *EnrolRequest, opts ...grpc.CallOption) (*EnrolResponse, error)
	// Register is called by a worker to indicate it is ready and capable of
	// handling the specified type of work.
	Register(ctx context.Context, in *RegistrationRequest, opts ...grpc.CallOption) (*RegistrationResponse, error)
	// GetConfig can be called by a worker to get the current configuration
	// state of the dispatcher service.
	GetConfiguration(ctx context.Context, in *ConfigurationRequest, opts ...grpc.CallOption) (*ConfigurationResponse, error)
	// Heartbeat is called by the worker to send the heartbeat information.
	Heartbeat(ctx context.Context, in *common.HeartbeatInfo, opts ...grpc.CallOption) (*common.Empty, error)
}

type edgeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEdgeServiceClient(cc grpc.ClientConnInterface) EdgeServiceClient {
	return &edgeServiceClient{cc}
}

func (c *edgeServiceClient) Enrol(ctx context.Context, in *EnrolRequest, opts ...grpc.CallOption) (*EnrolResponse, error) {
	out := new(EnrolResponse)
	err := c.cc.Invoke(ctx, "/EdgeService/Enrol", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *edgeServiceClient) Register(ctx context.Context, in *RegistrationRequest, opts ...grpc.CallOption) (*RegistrationResponse, error) {
	out := new(RegistrationResponse)
	err := c.cc.Invoke(ctx, "/EdgeService/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *edgeServiceClient) GetConfiguration(ctx context.Context, in *ConfigurationRequest, opts ...grpc.CallOption) (*ConfigurationResponse, error) {
	out := new(ConfigurationResponse)
	err := c.cc.Invoke(ctx, "/EdgeService/GetConfiguration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *edgeServiceClient) Heartbeat(ctx context.Context, in *common.HeartbeatInfo, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/EdgeService/Heartbeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EdgeServiceServer is the server API for EdgeService service.
// All implementations must embed UnimplementedEdgeServiceServer
// for forward compatibility
type EdgeServiceServer interface {
	// Enrol is called by a worker to send the request to enrol the fleet.
	Enrol(context.Context, *EnrolRequest) (*EnrolResponse, error)
	// Register is called by a worker to indicate it is ready and capable of
	// handling the specified type of work.
	Register(context.Context, *RegistrationRequest) (*RegistrationResponse, error)
	// GetConfig can be called by a worker to get the current configuration
	// state of the dispatcher service.
	GetConfiguration(context.Context, *ConfigurationRequest) (*ConfigurationResponse, error)
	// Heartbeat is called by the worker to send the heartbeat information.
	Heartbeat(context.Context, *common.HeartbeatInfo) (*common.Empty, error)
	mustEmbedUnimplementedEdgeServiceServer()
}

// UnimplementedEdgeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEdgeServiceServer struct {
}

func (UnimplementedEdgeServiceServer) Enrol(context.Context, *EnrolRequest) (*EnrolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Enrol not implemented")
}
func (UnimplementedEdgeServiceServer) Register(context.Context, *RegistrationRequest) (*RegistrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedEdgeServiceServer) GetConfiguration(context.Context, *ConfigurationRequest) (*ConfigurationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfiguration not implemented")
}
func (UnimplementedEdgeServiceServer) Heartbeat(context.Context, *common.HeartbeatInfo) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Heartbeat not implemented")
}
func (UnimplementedEdgeServiceServer) mustEmbedUnimplementedEdgeServiceServer() {}

// UnsafeEdgeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EdgeServiceServer will
// result in compilation errors.
type UnsafeEdgeServiceServer interface {
	mustEmbedUnimplementedEdgeServiceServer()
}

func RegisterEdgeServiceServer(s grpc.ServiceRegistrar, srv EdgeServiceServer) {
	s.RegisterService(&EdgeService_ServiceDesc, srv)
}

func _EdgeService_Enrol_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnrolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EdgeServiceServer).Enrol(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/EdgeService/Enrol",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EdgeServiceServer).Enrol(ctx, req.(*EnrolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EdgeService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegistrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EdgeServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/EdgeService/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EdgeServiceServer).Register(ctx, req.(*RegistrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EdgeService_GetConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EdgeServiceServer).GetConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/EdgeService/GetConfiguration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EdgeServiceServer).GetConfiguration(ctx, req.(*ConfigurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EdgeService_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.HeartbeatInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EdgeServiceServer).Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/EdgeService/Heartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EdgeServiceServer).Heartbeat(ctx, req.(*common.HeartbeatInfo))
	}
	return interceptor(ctx, in, info, handler)
}

// EdgeService_ServiceDesc is the grpc.ServiceDesc for EdgeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EdgeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "EdgeService",
	HandlerType: (*EdgeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Enrol",
			Handler:    _EdgeService_Enrol_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _EdgeService_Register_Handler,
		},
		{
			MethodName: "GetConfiguration",
			Handler:    _EdgeService_GetConfiguration_Handler,
		},
		{
			MethodName: "Heartbeat",
			Handler:    _EdgeService_Heartbeat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "edge.proto",
}
